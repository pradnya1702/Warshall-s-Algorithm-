/*
to check that there is path between two veertices we have 2 method 
1]mulplication
2]warshalla's algorithm

transitive closare - Transitive Closure it the reachability matrix to reach from vertex u to vertex v of a graph
*/
#include<iostream>
using namespace std;

class Graph
{
	int **G;
	int n,dir,wt,start;
	public:
		Graph()
		{
			cout<<endl<<"enter number of vertices :";
			cin>>n;
			G= new int*[n];
			for(int i=0;i<n;i++)
			{
				G[i] = new int[n];
			}
			
			for(int i= 0 ; i<n; i++)
			{
				for(int j=0; j<n ; j++)
				{
					G[i][j]=0;
				}
			}
		}
	
		void showGraph();
		void insert(int u,int v,int w);
	    void readGraph();
	    void using_multiplication();
	    void warshalls_algorithm();	   
};


void Graph::warshalls_algorithm()
{
	 int **tc;
	 tc = new int*[n];
	 for(int i=0 ;i<n;i++)
	 {
	 	tc[i] = new int[n];
	 }
	 for(int i=0;i<n;i++)
	 {
	 	for(int j=0;j<n;j++)
	 	{
	 	 tc[i][j] =	G[i][j];
	    }
	 }
	 
 	for(int k=0; k<n ; k++)
	 {
	 	for(int i=0;i<n;i++)
	    {
	 		for(int j=0;j<n;j++)
	 		{
	 			if(tc[i][j] == 0)
	 			{
	 		      if(tc[i][k] != 0 && tc[k][j] != 0)
				   {
				      tc[i][j]=1;	
				   }		
			    }
	        }	 	  	
	    }
	 }
	 cout<<endl<<"transitive closare :"<<endl;
	 for(int i=0;i<n;i++)
	 {
	 	for(int j=0;j<n;j++)
	 	{
	 	  cout<<tc[i][j]<<"  ";	
        }
        cout<<endl;
	 }
}

//----------------showGraph--------------------------
void Graph::showGraph()
{
  cout<<endl<<"Your "<<n<<"x"<<n<<" matrix :"<<endl;
  for(int i=0;i<n;i++)
  {
  	for(int j=0;j<n;j++)
  	{
  	   cout<<G[i][j]<<"  ";
		 	
    }
    cout<<endl;
  }		
}

//---------------------insert----------------------
void Graph::insert(int u,int v,int w=1)
{
	  G[u][v]=w;
	  if(wt==0)
	  {
	  	G[v][u]=w;
	  	
	  }
}

//--------------readGraph----------------------------
void Graph:: readGraph()
{
	cout<<endl<<"is your graph is directed Press 1: YES or 0: NO :";
	cin>>dir;
	cout<<endl<<"is your graph is weighted Press YES or 0: NO :";
	cin>>wt;
	cout<<endl<<"enter start :";
	cin>>start;
	cout<<endl<<"enter adj vertex :";
	for(int i=0;i<n;i++)
	{
		for(int j=0 ;j<n;j++)
		{
			cin>>G[i][j];
		}
	}
}
int main()
{
	
	Graph b;
	b.readGraph();
	b.showGraph();
	b.warshalls_algorithm();
}
